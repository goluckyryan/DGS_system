##	PV GLBL:DIG:F01:ext_disc_src generated by WriteEPICSBitgroup from line 81 of spreadsheet
record(mbbo,"GLBL:DIG:ext_disc_src")
{
field(DTYP,"asynUInt32Digital")
#  Source string : 0:Slv to Ch 9:0;1:Front Bus:1;2:Aux IO:2;3:Timestamp:3;4:VME_EXT:4;5:IF_GE_KILL:5;6:EXT_FROM_TRG:6;7:ANY_OTHER:7
	field (ZRST,"Slv to Ch 9")
	field (ZRVL,"0")
	field (ONST,"Front Bus")
	field (ONVL,"1")
	field (TWST,"Aux IO")
	field (TWVL,"2")
	field (THST,"Timestamp")
	field (THVL,"3")
	field (FRST,"VME_EXT")
	field (FRVL,"4")
	field (FVST,"IF_GE_KILL")
	field (FVVL,"5")
	field (SXST,"EXT_FROM_TRG")
	field (SXVL,"6")
	field (SVST,"ANY_OTHER")
	field (SVVL,"7")
	
field(DESC,"Selects source of the ex")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Selects source of the external discriminator bit for the channel.
field(OUT,"GLBL:DIG:F01:ext_disc_src PP NMS")
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of ext_disc_src across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:ext_disc_src")
{
field(OUTA,"GLBL:DIG:F02:ext_disc_src PP NMS ")
field(OUTB,"VME01:GLBL:ext_disc_src PP NMS ")
field(PREC,"3")
}
record(dfanout,"GLBL:DIG:F02:ext_disc_src")
{
field(OUTA,"VME02:GLBL:ext_disc_src PP NMS ")
field(PREC,"3")
}

##	PV GLBL:DIG:F01:user_package_data generated by WriteEPICSBitgroup from line 112 of spreadsheet
record(ai,"$(P)$(R)GLBL:DIG:F01:user_package_data")
{
field(SCAN,"1 second")
field(DTYP,"asynUInt32Digital")
field(INP,"GLBL:DIG:F01:user_package_data PP NMS")
field(DESC,"User defined data for he")		##DESC truncated to EPICS limit of 24 characters. 
										##Full description : User defined data for header of data packets read by VME
## No conversions specified for \*conversions*\ keyword
}
#-------------------------------------------------------
record(ao,"$(P)$(R)GLBL:DIG:F01:user_package_data")
{
field(DTYP,"asynUInt32Digital")
field(OUT,"GLBL:DIG:F01:user_package_data PP NMS")
## No conversions specified for \*conversions*\ keyword
field(DESC,"User defined data for he")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : User defined data for header of data packets read by VME
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of user_package_data across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:user_package_data")
{
field(OUTA,"GLBL:DIG:F02:user_package_data PP NMS ")
field(OUTB,"VME01:GLBL:user_package_data PP NMS ")
field(PREC,"3")
}
record(dfanout,"GLBL:DIG:F02:user_package_data")
{
field(OUTA,"VME02:GLBL:user_package_data PP NMS ")
field(PREC,"3")
}

##------------------------------------------------------------------
##  Fanout of win_comp_min across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:win_comp_min")
{
field(OUTA,"GLBL:DIG:F02:win_comp_min PP NMS ")
field(OUTB,"VME01:GLBL:win_comp_min PP NMS ")
field(PREC,"3")
}
record(dfanout,"GLBL:DIG:F02:win_comp_min")
{
field(OUTA,"VME02:GLBL:win_comp_min PP NMS ")
field(PREC,"3")
}

##------------------------------------------------------------------
##  Fanout of win_comp_max across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:win_comp_max")
{
field(OUTA,"GLBL:DIG:F02:win_comp_max PP NMS ")
field(OUTB,"VME01:GLBL:win_comp_max PP NMS ")
field(PREC,"3")
}
record(dfanout,"GLBL:DIG:F02:win_comp_max")
{
field(OUTA,"VME02:GLBL:win_comp_max PP NMS ")
field(PREC,"3")
}

##	PV GLBL:DIG:F01:pileup_waveform_only_mode generated by WriteEPICSBitgroup from line 363 of spreadsheet
record(bi,"GLBL:DIG:F01:pileup_waveform_only_mode")
{
field(DTYP,"asynUInt32Digital")
field(SCAN,"1 second")
#  Source string : 0:Disable;1:Enable
field (ZNAM,"Disable")
field (ONAM,"Enable")
	
field(DESC,"0 = All events will have")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : 0 = All events will have waveform data as determined by the other mode bits.  1 = Only piled-up events will have waveform data. (Other mode bits still apply.)
field(INP,"GLBL:DIG:F01:pileup_waveform_only_mode PP NMS")
}
#-------------------------------------------------------
record(bo,"GLBL:DIG:F01:pileup_waveform_only_mode")
{
field(DOL,"0")
field(DTYP,"asynUInt32Digital")
#  Source string : 0:Disable;1:Enable
field (ZNAM,"Disable")
field (ONAM,"Enable")
	
field(DESC,"0 = All events will have")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : 0 = All events will have waveform data as determined by the other mode bits.  1 = Only piled-up events will have waveform data. (Other mode bits still apply.)
field(OUT,"GLBL:DIG:F01:pileup_waveform_only_mode PP NMS")
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of pileup_waveform_only_mode across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:pileup_waveform_only_mode")
{
field(OUTA,"GLBL:DIG:F02:pileup_waveform_only_mode PP NMS ")
field(OUTB,"VME01:GLBL:pileup_waveform_only_mode PP NMS ")
field(PREC,"3")
}
record(dfanout,"GLBL:DIG:F02:pileup_waveform_only_mode")
{
field(OUTA,"VME02:GLBL:pileup_waveform_only_mode PP NMS ")
field(PREC,"3")
}

##	PV GLBL:DIG:F01:counter_reset generated by WriteEPICSBitgroup from line 365 of spreadsheet
record(bi,"GLBL:DIG:F01:counter_reset")
{
field(DTYP,"asynUInt32Digital")
field(SCAN,"1 second")
#  Source string : 0:Run;1:Reset
field (ZNAM,"Run")
field (ONAM,"Reset")
	
field(DESC,"Channel counter reset.  ")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Channel counter reset.  Will reset all channel specific counters when set. (0 = Run, 1 = Reset)
field(INP,"GLBL:DIG:F01:counter_reset PP NMS")
}
#-------------------------------------------------------
record(bo,"GLBL:DIG:F01:counter_reset")
{
field(DOL,"0")
field(DTYP,"asynUInt32Digital")
#  Source string : 0:Run;1:Reset
field (ZNAM,"Run")
field (ONAM,"Reset")
	
field(DESC,"Channel counter reset.  ")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Channel counter reset.  Will reset all channel specific counters when set. (0 = Run, 1 = Reset)
field(OUT,"GLBL:DIG:F01:counter_reset PP NMS")
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of counter_reset across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:counter_reset")
{
field(OUTA,"GLBL:DIG:F02:counter_reset PP NMS ")
field(OUTB,"VME01:GLBL:counter_reset PP NMS ")
field(PREC,"3")
}
record(dfanout,"GLBL:DIG:F02:counter_reset")
{
field(OUTA,"VME02:GLBL:counter_reset PP NMS ")
field(PREC,"3")
}

##	PV GLBL:DIG:F01:pileup_extension_mode generated by WriteEPICSBitgroup from line 367 of spreadsheet
record(bi,"GLBL:DIG:F01:pileup_extension_mode")
{
field(DTYP,"asynUInt32Digital")
field(SCAN,"1 second")
#  Source string : 0:Disable;1:Enable
field (ZNAM,"Disable")
field (ONAM,"Enable")
	
field(DESC,"Enable bit for pileup ex")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Enable bit for pileup extensions.  See external document for details. (0 = Disabled, 1 = Enabled)
field(INP,"GLBL:DIG:F01:pileup_extension_mode PP NMS")
}
#-------------------------------------------------------
record(bo,"GLBL:DIG:F01:pileup_extension_mode")
{
field(DOL,"0")
field(DTYP,"asynUInt32Digital")
#  Source string : 0:Disable;1:Enable
field (ZNAM,"Disable")
field (ONAM,"Enable")
	
field(DESC,"Enable bit for pileup ex")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Enable bit for pileup extensions.  See external document for details. (0 = Disabled, 1 = Enabled)
field(OUT,"GLBL:DIG:F01:pileup_extension_mode PP NMS")
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of pileup_extension_mode across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:pileup_extension_mode")
{
field(OUTA,"GLBL:DIG:F02:pileup_extension_mode PP NMS ")
field(OUTB,"VME01:GLBL:pileup_extension_mode PP NMS ")
field(PREC,"3")
}
record(dfanout,"GLBL:DIG:F02:pileup_extension_mode")
{
field(OUTA,"VME02:GLBL:pileup_extension_mode PP NMS ")
field(PREC,"3")
}

##	PV GLBL:DIG:F01:event_extension_mode generated by WriteEPICSBitgroup from line 369 of spreadsheet
record(mbbi,"GLBL:DIG:F01:event_extension_mode")
{
field(DTYP,"asynUInt32Digital")
field(SCAN,"1 second")
#  Source string : 0:Disable:0;1:Offset:1;2:OffsTrunc:2;3:Headers:3
	field (ZRST,"Disable")
	field (ZRVL,"0")
	field (ONST,"Offset")
	field (ONVL,"1")
	field (TWST,"OffsTrunc")
	field (TWVL,"2")
	field (THST,"Headers")
	field (THVL,"3")
	
field(DESC,"Sets the event extension")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Sets the event extension mode.  See external document for details. (0 = Disabled, 1 = Offset, 2 = Offset with truncation, 3 = Headers only)
field(INP,"GLBL:DIG:F01:event_extension_mode PP NMS")
}
#-------------------------------------------------------
record(mbbo,"GLBL:DIG:F01:event_extension_mode")
{
field(DTYP,"asynUInt32Digital")
#  Source string : 0:Disable:0;1:Offset:1;2:OffsTrunc:2;3:Headers:3
	field (ZRST,"Disable")
	field (ZRVL,"0")
	field (ONST,"Offset")
	field (ONVL,"1")
	field (TWST,"OffsTrunc")
	field (TWVL,"2")
	field (THST,"Headers")
	field (THVL,"3")
	
field(DESC,"Sets the event extension")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Sets the event extension mode.  See external document for details. (0 = Disabled, 1 = Offset, 2 = Offset with truncation, 3 = Headers only)
field(OUT,"GLBL:DIG:F01:event_extension_mode PP NMS")
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of event_extension_mode across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:event_extension_mode")
{
field(OUTA,"GLBL:DIG:F02:event_extension_mode PP NMS ")
field(OUTB,"VME01:GLBL:event_extension_mode PP NMS ")
field(PREC,"3")
}
record(dfanout,"GLBL:DIG:F02:event_extension_mode")
{
field(OUTA,"VME02:GLBL:event_extension_mode PP NMS ")
field(PREC,"3")
}

##	PV GLBL:DIG:F01:disc_count_mode generated by WriteEPICSBitgroup from line 371 of spreadsheet
record(bi,"GLBL:DIG:F01:disc_count_mode")
{
field(DTYP,"asynUInt32Digital")
field(SCAN,"1 second")
#  Source string : 0:Rate;1:Count
field (ZNAM,"Rate")
field (ONAM,"Count")
	
field(DESC,"Sets the mode of operati")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Sets the mode of operation for the raw discriminator hit event counter. (0 = Rate, 1 = Count)
field(INP,"GLBL:DIG:F01:disc_count_mode PP NMS")
}
#-------------------------------------------------------
record(bo,"GLBL:DIG:F01:disc_count_mode")
{
field(DOL,"0")
field(DTYP,"asynUInt32Digital")
#  Source string : 0:Rate;1:Count
field (ZNAM,"Rate")
field (ONAM,"Count")
	
field(DESC,"Sets the mode of operati")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Sets the mode of operation for the raw discriminator hit event counter. (0 = Rate, 1 = Count)
field(OUT,"GLBL:DIG:F01:disc_count_mode PP NMS")
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of disc_count_mode across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:disc_count_mode")
{
field(OUTA,"GLBL:DIG:F02:disc_count_mode PP NMS ")
field(OUTB,"VME01:GLBL:disc_count_mode PP NMS ")
field(PREC,"3")
}
record(dfanout,"GLBL:DIG:F02:disc_count_mode")
{
field(OUTA,"VME02:GLBL:disc_count_mode PP NMS ")
field(PREC,"3")
}

##	PV GLBL:DIG:F01:ahit_count_mode generated by WriteEPICSBitgroup from line 373 of spreadsheet
record(bi,"GLBL:DIG:F01:ahit_count_mode")
{
field(DTYP,"asynUInt32Digital")
field(SCAN,"1 second")
#  Source string : 0:Rate;1:Count
field (ZNAM,"Rate")
field (ONAM,"Count")
	
field(DESC,"Sets the mode of operati")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Sets the mode of operation for the accepted hit counter. (0 = Rate, 1 = Count)
field(INP,"GLBL:DIG:F01:ahit_count_mode PP NMS")
}
#-------------------------------------------------------
record(bo,"GLBL:DIG:F01:ahit_count_mode")
{
field(DOL,"0")
field(DTYP,"asynUInt32Digital")
#  Source string : 0:Rate;1:Count
field (ZNAM,"Rate")
field (ONAM,"Count")
	
field(DESC,"Sets the mode of operati")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Sets the mode of operation for the accepted hit counter. (0 = Rate, 1 = Count)
field(OUT,"GLBL:DIG:F01:ahit_count_mode PP NMS")
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of ahit_count_mode across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:ahit_count_mode")
{
field(OUTA,"GLBL:DIG:F02:ahit_count_mode PP NMS ")
field(OUTB,"VME01:GLBL:ahit_count_mode PP NMS ")
field(PREC,"3")
}
record(dfanout,"GLBL:DIG:F02:ahit_count_mode")
{
field(OUTA,"VME02:GLBL:ahit_count_mode PP NMS ")
field(PREC,"3")
}

##	PV GLBL:DIG:F01:event_count_mode generated by WriteEPICSBitgroup from line 375 of spreadsheet
record(bi,"GLBL:DIG:F01:event_count_mode")
{
field(DTYP,"asynUInt32Digital")
field(SCAN,"1 second")
#  Source string : 0:Rate;1:Count
field (ZNAM,"Rate")
field (ONAM,"Count")
	
field(DESC,"Sets the mode of operati")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Sets the mode of operation for the accepted event counter. (0 = Rate, 1 = Count)
field(INP,"GLBL:DIG:F01:event_count_mode PP NMS")
}
#-------------------------------------------------------
record(bo,"GLBL:DIG:F01:event_count_mode")
{
field(DOL,"0")
field(DTYP,"asynUInt32Digital")
#  Source string : 0:Rate;1:Count
field (ZNAM,"Rate")
field (ONAM,"Count")
	
field(DESC,"Sets the mode of operati")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Sets the mode of operation for the accepted event counter. (0 = Rate, 1 = Count)
field(OUT,"GLBL:DIG:F01:event_count_mode PP NMS")
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of event_count_mode across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:event_count_mode")
{
field(OUTA,"GLBL:DIG:F02:event_count_mode PP NMS ")
field(OUTB,"VME01:GLBL:event_count_mode PP NMS ")
field(PREC,"3")
}
record(dfanout,"GLBL:DIG:F02:event_count_mode")
{
field(OUTA,"VME02:GLBL:event_count_mode PP NMS ")
field(PREC,"3")
}

##	PV GLBL:DIG:F01:dropped_event_count_mode generated by WriteEPICSBitgroup from line 377 of spreadsheet
record(bi,"GLBL:DIG:F01:dropped_event_count_mode")
{
field(DTYP,"asynUInt32Digital")
field(SCAN,"1 second")
#  Source string : 0:Rate;1:Count
field (ZNAM,"Rate")
field (ONAM,"Count")
	
field(DESC,"Sets the mode of operati")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Sets the mode of operation for the dropped event counter. (0 = Rate, 1 = Count)
field(INP,"GLBL:DIG:F01:dropped_event_count_mode PP NMS")
}
#-------------------------------------------------------
record(bo,"GLBL:DIG:F01:dropped_event_count_mode")
{
field(DOL,"0")
field(DTYP,"asynUInt32Digital")
#  Source string : 0:Rate;1:Count
field (ZNAM,"Rate")
field (ONAM,"Count")
	
field(DESC,"Sets the mode of operati")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Sets the mode of operation for the dropped event counter. (0 = Rate, 1 = Count)
field(OUT,"GLBL:DIG:F01:dropped_event_count_mode PP NMS")
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of dropped_event_count_mode across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:dropped_event_count_mode")
{
field(OUTA,"GLBL:DIG:F02:dropped_event_count_mode PP NMS ")
field(OUTB,"VME01:GLBL:dropped_event_count_mode PP NMS ")
field(PREC,"3")
}
record(dfanout,"GLBL:DIG:F02:dropped_event_count_mode")
{
field(OUTA,"VME02:GLBL:dropped_event_count_mode PP NMS ")
field(PREC,"3")
}

##	PV GLBL:DIG:F01:enable_dec_pause generated by WriteEPICSBitgroup from line 379 of spreadsheet
record(bi,"GLBL:DIG:F01:enable_dec_pause")
{
field(DTYP,"asynUInt32Digital")
field(SCAN,"1 second")
#  Source string : 0:No;1:Yes
field (ZNAM,"No")
field (ONAM,"Yes")
	
field(DESC,"If set decimation pauses")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : If set decimation pauses around edges
field(INP,"GLBL:DIG:F01:enable_dec_pause PP NMS")
}
#-------------------------------------------------------
record(bo,"GLBL:DIG:F01:enable_dec_pause")
{
field(DOL,"0")
field(DTYP,"asynUInt32Digital")
#  Source string : 0:No;1:Yes
field (ZNAM,"No")
field (ONAM,"Yes")
	
field(DESC,"If set decimation pauses")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : If set decimation pauses around edges
field(OUT,"GLBL:DIG:F01:enable_dec_pause PP NMS")
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of enable_dec_pause across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:enable_dec_pause")
{
field(OUTA,"GLBL:DIG:F02:enable_dec_pause PP NMS ")
field(OUTB,"VME01:GLBL:enable_dec_pause PP NMS ")
field(PREC,"3")
}
record(dfanout,"GLBL:DIG:F02:enable_dec_pause")
{
field(OUTA,"VME02:GLBL:enable_dec_pause PP NMS ")
field(PREC,"3")
}

##	PV GLBL:DIG:F01:write_flags generated by WriteEPICSBitgroup from line 381 of spreadsheet
record(bi,"GLBL:DIG:F01:write_flags")
{
field(DTYP,"asynUInt32Digital")
field(SCAN,"1 second")
#  Source string : 0:horns:0;1:shift data:1
field (ZNAM,"horns:0")
field (ONAM,"shift data:1")
	
field(DESC,"Controls how the 16-bit ")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Controls how the 16-bit waveform sample is formatted.  (0=normal with flags, 1=shifted data without flags)
field(INP,"GLBL:DIG:F01:write_flags PP NMS")
}
#-------------------------------------------------------
record(bo,"GLBL:DIG:F01:write_flags")
{
field(DOL,"0")
field(DTYP,"asynUInt32Digital")
#  Source string : 0:horns:0;1:shift data:1
field (ZNAM,"horns:0")
field (ONAM,"shift data:1")
	
field(DESC,"Controls how the 16-bit ")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Controls how the 16-bit waveform sample is formatted.  (0=normal with flags, 1=shifted data without flags)
field(OUT,"GLBL:DIG:F01:write_flags PP NMS")
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of write_flags across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:write_flags")
{
field(OUTA,"GLBL:DIG:F02:write_flags PP NMS ")
field(OUTB,"VME01:GLBL:write_flags PP NMS ")
field(PREC,"3")
}
record(dfanout,"GLBL:DIG:F02:write_flags")
{
field(OUTA,"VME02:GLBL:write_flags PP NMS ")
field(PREC,"3")
}

##	PV GLBL:DIG:F01:decimation_factor generated by WriteEPICSBitgroup from line 383 of spreadsheet
record(mbbi,"GLBL:DIG:F01:decimation_factor")
{
field(DTYP,"asynUInt32Digital")
field(SCAN,"1 second")
#  Source string : 0:1x:0;1:2x:1;2:4x:2;3:8x:3;4:16x:4;5:32x:5;6:64x:6;7:128x:7
	field (ZRST,"1x")
	field (ZRVL,"0")
	field (ONST,"2x")
	field (ONVL,"1")
	field (TWST,"4x")
	field (TWVL,"2")
	field (THST,"8x")
	field (THVL,"3")
	field (FRST,"16x")
	field (FRVL,"4")
	field (FVST,"32x")
	field (FVVL,"5")
	field (SXST,"64x")
	field (SXVL,"6")
	field (SVST,"128x")
	field (SVVL,"7")
	
field(DESC,"Controls waveform time c")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Controls waveform time compression.  Default is 1x (all samples at full rate)
field(INP,"GLBL:DIG:F01:decimation_factor PP NMS")
}
#-------------------------------------------------------
record(mbbo,"GLBL:DIG:F01:decimation_factor")
{
field(DTYP,"asynUInt32Digital")
#  Source string : 0:1x:0;1:2x:1;2:4x:2;3:8x:3;4:16x:4;5:32x:5;6:64x:6;7:128x:7
	field (ZRST,"1x")
	field (ZRVL,"0")
	field (ONST,"2x")
	field (ONVL,"1")
	field (TWST,"4x")
	field (TWVL,"2")
	field (THST,"8x")
	field (THVL,"3")
	field (FRST,"16x")
	field (FRVL,"4")
	field (FVST,"32x")
	field (FVVL,"5")
	field (SXST,"64x")
	field (SXVL,"6")
	field (SVST,"128x")
	field (SVVL,"7")
	
field(DESC,"Controls waveform time c")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Controls waveform time compression.  Default is 1x (all samples at full rate)
field(OUT,"GLBL:DIG:F01:decimation_factor PP NMS")
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of decimation_factor across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:decimation_factor")
{
field(OUTA,"GLBL:DIG:F02:decimation_factor PP NMS ")
field(OUTB,"VME01:GLBL:decimation_factor PP NMS ")
field(PREC,"3")
}
record(dfanout,"GLBL:DIG:F02:decimation_factor")
{
field(OUTA,"VME02:GLBL:decimation_factor PP NMS ")
field(PREC,"3")
}

##	PV GLBL:DIG:F01:trigger_polarity generated by WriteEPICSBitgroup from line 385 of spreadsheet
record(mbbi,"GLBL:DIG:F01:trigger_polarity")
{
field(DTYP,"asynUInt32Digital")
field(SCAN,"1 second")
#  Source string : 0:Disabled:0;1:RiseEdge:1;2:FallEdge:2;3:Both:3
	field (ZRST,"Disabled")
	field (ZRVL,"0")
	field (ONST,"RiseEdge")
	field (ONVL,"1")
	field (TWST,"FallEdge")
	field (TWVL,"2")
	field (THST,"Both")
	field (THVL,"3")
	
field(DESC,"Sets the edge mode for t")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Sets the edge mode for the discriminator.  (0 = Disabled, 1 = Rising Edge, 2 = Falling Edge, 3 = Both)
field(INP,"GLBL:DIG:F01:trigger_polarity PP NMS")
}
#-------------------------------------------------------
record(mbbo,"GLBL:DIG:F01:trigger_polarity")
{
field(DTYP,"asynUInt32Digital")
#  Source string : 0:Disabled:0;1:RiseEdge:1;2:FallEdge:2;3:Both:3
	field (ZRST,"Disabled")
	field (ZRVL,"0")
	field (ONST,"RiseEdge")
	field (ONVL,"1")
	field (TWST,"FallEdge")
	field (TWVL,"2")
	field (THST,"Both")
	field (THVL,"3")
	
field(DESC,"Sets the edge mode for t")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Sets the edge mode for the discriminator.  (0 = Disabled, 1 = Rising Edge, 2 = Falling Edge, 3 = Both)
field(OUT,"GLBL:DIG:F01:trigger_polarity PP NMS")
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of trigger_polarity across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:trigger_polarity")
{
field(OUTA,"GLBL:DIG:F02:trigger_polarity PP NMS ")
field(OUTB,"VME01:GLBL:trigger_polarity PP NMS ")
field(PREC,"3")
}
record(dfanout,"GLBL:DIG:F02:trigger_polarity")
{
field(OUTA,"VME02:GLBL:trigger_polarity PP NMS ")
field(PREC,"3")
}

##	PV GLBL:DIG:F01:preamp_reset_delay_en generated by WriteEPICSBitgroup from line 387 of spreadsheet
record(bi,"GLBL:DIG:F01:preamp_reset_delay_en")
{
field(DTYP,"asynUInt32Digital")
field(SCAN,"1 second")
#  Source string : 0:Disabled;1:Enabled
field (ZNAM,"Disabled")
field (ONAM,"Enabled")
	
field(DESC,"Enables blanking the dis")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Enables blanking the discriminator for a period of time after the preamp reset.
field(INP,"GLBL:DIG:F01:preamp_reset_delay_en PP NMS")
}
#-------------------------------------------------------
record(bo,"GLBL:DIG:F01:preamp_reset_delay_en")
{
field(DOL,"0")
field(DTYP,"asynUInt32Digital")
#  Source string : 0:Disabled;1:Enabled
field (ZNAM,"Disabled")
field (ONAM,"Enabled")
	
field(DESC,"Enables blanking the dis")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Enables blanking the discriminator for a period of time after the preamp reset.
field(OUT,"GLBL:DIG:F01:preamp_reset_delay_en PP NMS")
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of preamp_reset_delay_en across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:preamp_reset_delay_en")
{
field(OUTA,"GLBL:DIG:F02:preamp_reset_delay_en PP NMS ")
field(OUTB,"VME01:GLBL:preamp_reset_delay_en PP NMS ")
field(PREC,"3")
}
record(dfanout,"GLBL:DIG:F02:preamp_reset_delay_en")
{
field(OUTA,"VME02:GLBL:preamp_reset_delay_en PP NMS ")
field(PREC,"3")
}

##	PV GLBL:DIG:F01:pileup_mode generated by WriteEPICSBitgroup from line 389 of spreadsheet
record(bi,"GLBL:DIG:F01:pileup_mode")
{
field(DTYP,"asynUInt32Digital")
field(SCAN,"1 second")
#  Source string : 0:Reject;1:Accept
field (ZNAM,"Reject")
field (ONAM,"Accept")
	
field(DESC,"Sets how pileup events a")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Sets how pileup events are handled. (0 = Accept, 1 = Reject)
field(INP,"GLBL:DIG:F01:pileup_mode PP NMS")
}
#-------------------------------------------------------
record(bo,"GLBL:DIG:F01:pileup_mode")
{
field(DOL,"0")
field(DTYP,"asynUInt32Digital")
#  Source string : 0:Reject;1:Accept
field (ZNAM,"Reject")
field (ONAM,"Accept")
	
field(DESC,"Sets how pileup events a")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Sets how pileup events are handled. (0 = Accept, 1 = Reject)
field(OUT,"GLBL:DIG:F01:pileup_mode PP NMS")
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of pileup_mode across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:pileup_mode")
{
field(OUTA,"GLBL:DIG:F02:pileup_mode PP NMS ")
field(OUTB,"VME01:GLBL:pileup_mode PP NMS ")
field(PREC,"3")
}
record(dfanout,"GLBL:DIG:F02:pileup_mode")
{
field(OUTA,"VME02:GLBL:pileup_mode PP NMS ")
field(PREC,"3")
}

##	PV GLBL:DIG:F01:channel_enable generated by WriteEPICSBitgroup from line 391 of spreadsheet
record(bi,"GLBL:DIG:F01:channel_enable")
{
field(DTYP,"asynUInt32Digital")
field(SCAN,"1 second")
#  Source string : 0:Reset;1:Run
field (ZNAM,"Reset")
field (ONAM,"Run")
	
field(DESC,"Channel logic enable. (0")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Channel logic enable. (0 = Reset, 1 = Run)
field(INP,"GLBL:DIG:F01:channel_enable PP NMS")
}
#-------------------------------------------------------
record(bo,"GLBL:DIG:F01:channel_enable")
{
field(DOL,"0")
field(DTYP,"asynUInt32Digital")
#  Source string : 0:Reset;1:Run
field (ZNAM,"Reset")
field (ONAM,"Run")
	
field(DESC,"Channel logic enable. (0")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Channel logic enable. (0 = Reset, 1 = Run)
field(OUT,"GLBL:DIG:F01:channel_enable PP NMS")
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of channel_enable across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:channel_enable")
{
field(OUTA,"GLBL:DIG:F02:channel_enable PP NMS ")
field(OUTB,"VME01:GLBL:channel_enable PP NMS ")
field(PREC,"3")
}
record(dfanout,"GLBL:DIG:F02:channel_enable")
{
field(OUTA,"VME02:GLBL:channel_enable PP NMS ")
field(PREC,"3")
}

##	PV GLBL:DIG:F01:preamp_reset_delay generated by WriteEPICSBitgroup from line 446 of spreadsheet
record(ai,"$(P)$(R)GLBL:DIG:F01:preamp_reset_delay")
{
field(SCAN,"1 second")
field(DTYP,"asynUInt32Digital")
field(INP,"GLBL:DIG:F01:preamp_reset_delay PP NMS")
field(DESC,"Number of delay counts o")		##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Number of delay counts of period d+k before the dicriminator is rearmed after a pre-amp reset.
## No conversions specified for \*conversions*\ keyword
}
#-------------------------------------------------------
record(ao,"$(P)$(R)GLBL:DIG:F01:preamp_reset_delay")
{
field(DTYP,"asynUInt32Digital")
field(OUT,"GLBL:DIG:F01:preamp_reset_delay PP NMS")
## No conversions specified for \*conversions*\ keyword
field(DESC,"Number of delay counts o")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Number of delay counts of period d+k before the dicriminator is rearmed after a pre-amp reset.
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of preamp_reset_delay across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:preamp_reset_delay")
{
field(OUTA,"GLBL:DIG:F02:preamp_reset_delay PP NMS ")
field(OUTB,"VME01:GLBL:preamp_reset_delay PP NMS ")
field(PREC,"3")
}
record(dfanout,"GLBL:DIG:F02:preamp_reset_delay")
{
field(OUTA,"VME02:GLBL:preamp_reset_delay PP NMS ")
field(PREC,"3")
}

##	PV GLBL:DIG:F01:led_threshold generated by WriteEPICSBitgroup from line 448 of spreadsheet
record(ai,"$(P)$(R)GLBL:DIG:F01:led_threshold")
{
field(SCAN,"1 second")
field(DTYP,"asynUInt32Digital")
field(INP,"GLBL:DIG:F01:led_threshold PP NMS")
field(DESC,"Trigger threshold for th")		##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Trigger threshold for the leading edge discriminator
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(EGU,"adu")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
}
#-------------------------------------------------------
record(ao,"$(P)$(R)GLBL:DIG:F01:led_threshold")
{
field(DTYP,"asynUInt32Digital")
field(OUT,"GLBL:DIG:F01:led_threshold PP NMS")
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(EGU,"adu")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
field(DESC,"Trigger threshold for th")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Trigger threshold for the leading edge discriminator
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of led_threshold across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:led_threshold")
{
field(OUTA,"GLBL:DIG:F02:led_threshold PP NMS ")
field(OUTB,"VME01:GLBL:led_threshold PP NMS ")
field(PREC,"3")
}
record(dfanout,"GLBL:DIG:F02:led_threshold")
{
field(OUTA,"VME02:GLBL:led_threshold PP NMS ")
field(PREC,"3")
}

##------------------------------------------------------------------
##  Fanout of coarse_threshold across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:coarse_threshold")
{
field(OUTA,"GLBL:DIG:F02:coarse_threshold PP NMS ")
field(OUTB,"VME01:GLBL:coarse_threshold PP NMS ")
field(PREC,"3")
}
record(dfanout,"GLBL:DIG:F02:coarse_threshold")
{
field(OUTA,"VME02:GLBL:coarse_threshold PP NMS ")
field(PREC,"3")
}

##	PV GLBL:DIG:F01:CFD_fraction generated by WriteEPICSBitgroup from line 484 of spreadsheet
record(ai,"$(P)$(R)GLBL:DIG:F01:CFD_fraction")
{
field(SCAN,"1 second")
field(DTYP,"asynUInt32Digital")
field(INP,"GLBL:DIG:F01:CFD_fraction PP NMS")
field(DESC,"Constant-fraction-discri")		##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Constant-fraction-discriminator fraction.  User enters a number from 0->100%.  Multiply that by 8192, and store the integer result in bits 12:0 of the register.
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(EGU,"pct")
	field(ESLO,"0.01220703125")
	field(LINR,"SLOPE")
	field(PREC,"2")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
}
#-------------------------------------------------------
record(ao,"$(P)$(R)GLBL:DIG:F01:CFD_fraction")
{
field(DTYP,"asynUInt32Digital")
field(OUT,"GLBL:DIG:F01:CFD_fraction PP NMS")
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(EGU,"pct")
	field(ESLO,"0.01220703125")
	field(LINR,"SLOPE")
	field(PREC,"2")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
field(DESC,"Constant-fraction-discri")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Constant-fraction-discriminator fraction.  User enters a number from 0->100%.  Multiply that by 8192, and store the integer result in bits 12:0 of the register.
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of CFD_fraction across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:CFD_fraction")
{
field(OUTA,"GLBL:DIG:F02:CFD_fraction PP NMS ")
field(OUTB,"VME01:GLBL:CFD_fraction PP NMS ")
field(PREC,"3")
}
record(dfanout,"GLBL:DIG:F02:CFD_fraction")
{
field(OUTA,"VME02:GLBL:CFD_fraction PP NMS ")
field(PREC,"3")
}

##	PV GLBL:DIG:F01:raw_data_length generated by WriteEPICSBitgroup from line 518 of spreadsheet
record(ai,"$(P)$(R)GLBL:DIG:F01:raw_data_length")
{
field(SCAN,"1 second")
field(DTYP,"asynUInt32Digital")
field(INP,"GLBL:DIG:F01:raw_data_length PP NMS")
field(DESC,"Waveform offset value. (")		##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Waveform offset value. (10 ns per count)
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(EGU,"us")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
}
#-------------------------------------------------------
record(ao,"$(P)$(R)GLBL:DIG:F01:raw_data_length")
{
field(DTYP,"asynUInt32Digital")
field(OUT,"GLBL:DIG:F01:raw_data_length PP NMS")
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(EGU,"us")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
field(DESC,"Waveform offset value. (")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Waveform offset value. (10 ns per count)
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of raw_data_length across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:raw_data_length")
{
field(OUTA,"GLBL:DIG:F02:raw_data_length PP NMS ")
field(OUTB,"VME01:GLBL:raw_data_length PP NMS ")
}
record(dfanout,"GLBL:DIG:F02:raw_data_length")
{
field(OUTA,"VME02:GLBL:raw_data_length PP NMS ")
}

##	PV GLBL:DIG:F01:raw_data_window generated by WriteEPICSBitgroup from line 552 of spreadsheet
record(ai,"$(P)$(R)GLBL:DIG:F01:raw_data_window")
{
field(SCAN,"1 second")
field(DTYP,"asynUInt32Digital")
field(INP,"GLBL:DIG:F01:raw_data_window PP NMS")
field(DESC,"Waveform offset value. (")		##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Waveform offset value. (10 ns per count)
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(EGU,"us")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
}
#-------------------------------------------------------
record(ao,"$(P)$(R)GLBL:DIG:F01:raw_data_window")
{
field(DTYP,"asynUInt32Digital")
field(OUT,"GLBL:DIG:F01:raw_data_window PP NMS")
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(EGU,"us")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
field(DESC,"Waveform offset value. (")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Waveform offset value. (10 ns per count)
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of raw_data_window across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:raw_data_window")
{
field(OUTA,"GLBL:DIG:F02:raw_data_window PP NMS ")
field(OUTB,"VME01:GLBL:raw_data_window PP NMS ")
}
record(dfanout,"GLBL:DIG:F02:raw_data_window")
{
field(OUTA,"VME02:GLBL:raw_data_window PP NMS ")
}

##	PV GLBL:DIG:F01:d_window generated by WriteEPICSBitgroup from line 586 of spreadsheet
record(ai,"$(P)$(R)GLBL:DIG:F01:d_window")
{
field(SCAN,"1 second")
field(DTYP,"asynUInt32Digital")
field(INP,"GLBL:DIG:F01:d_window PP NMS")
field(DESC,"Set the width of the d w")		##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Set the width of the d window. (10 ns per count)
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(EGU,"us")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
}
#-------------------------------------------------------
record(ao,"$(P)$(R)GLBL:DIG:F01:d_window")
{
field(DTYP,"asynUInt32Digital")
field(OUT,"GLBL:DIG:F01:d_window PP NMS")
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(EGU,"us")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
field(DESC,"Set the width of the d w")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Set the width of the d window. (10 ns per count)
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of d_window across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:d_window")
{
field(OUTA,"GLBL:DIG:F02:d_window PP NMS ")
field(OUTB,"VME01:GLBL:d_window PP NMS ")
}
record(dfanout,"GLBL:DIG:F02:d_window")
{
field(OUTA,"VME02:GLBL:d_window PP NMS ")
}

##	PV GLBL:DIG:F01:k0_window generated by WriteEPICSBitgroup from line 628 of spreadsheet
record(ai,"$(P)$(R)GLBL:DIG:F01:k0_window")
{
field(SCAN,"1 second")
field(DTYP,"asynUInt32Digital")
field(INP,"GLBL:DIG:F01:k0_window PP NMS")
field(DESC,"Set the width of the k0 ")		##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Set the width of the k0 window. (10 ns per count)
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(EGU,"us")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
}
#-------------------------------------------------------
record(ao,"$(P)$(R)GLBL:DIG:F01:k0_window")
{
field(DTYP,"asynUInt32Digital")
field(OUT,"GLBL:DIG:F01:k0_window PP NMS")
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(EGU,"us")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
field(DESC,"Set the width of the k0 ")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Set the width of the k0 window. (10 ns per count)
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of k0_window across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:k0_window")
{
field(OUTA,"GLBL:DIG:F02:k0_window PP NMS ")
field(OUTB,"VME01:GLBL:k0_window PP NMS ")
}
record(dfanout,"GLBL:DIG:F02:k0_window")
{
field(OUTA,"VME02:GLBL:k0_window PP NMS ")
}

##	PV GLBL:DIG:F01:k_window generated by WriteEPICSBitgroup from line 630 of spreadsheet
record(ai,"$(P)$(R)GLBL:DIG:F01:k_window")
{
field(SCAN,"1 second")
field(DTYP,"asynUInt32Digital")
field(INP,"GLBL:DIG:F01:k_window PP NMS")
field(DESC,"Set the width of the k w")		##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Set the width of the k window. (10 ns per count)
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(EGU,"us")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
}
#-------------------------------------------------------
record(ao,"$(P)$(R)GLBL:DIG:F01:k_window")
{
field(DTYP,"asynUInt32Digital")
field(OUT,"GLBL:DIG:F01:k_window PP NMS")
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(EGU,"us")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
field(DESC,"Set the width of the k w")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Set the width of the k window. (10 ns per count)
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of k_window across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:k_window")
{
field(OUTA,"GLBL:DIG:F02:k_window PP NMS ")
field(OUTB,"VME01:GLBL:k_window PP NMS ")
}
record(dfanout,"GLBL:DIG:F02:k_window")
{
field(OUTA,"VME02:GLBL:k_window PP NMS ")
}

##	PV GLBL:DIG:F01:m_window generated by WriteEPICSBitgroup from line 662 of spreadsheet
record(ai,"$(P)$(R)GLBL:DIG:F01:m_window")
{
field(SCAN,"1 second")
field(DTYP,"asynUInt32Digital")
field(INP,"GLBL:DIG:F01:m_window PP NMS")
field(DESC,"Set the width of the m w")		##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Set the width of the m window. (10 ns per count)
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(EGU,"us")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
}
#-------------------------------------------------------
record(ao,"$(P)$(R)GLBL:DIG:F01:m_window")
{
field(DTYP,"asynUInt32Digital")
field(OUT,"GLBL:DIG:F01:m_window PP NMS")
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(EGU,"us")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
field(DESC,"Set the width of the m w")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Set the width of the m window. (10 ns per count)
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of m_window across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:m_window")
{
field(OUTA,"GLBL:DIG:F02:m_window PP NMS ")
field(OUTB,"VME01:GLBL:m_window PP NMS ")
}
record(dfanout,"GLBL:DIG:F02:m_window")
{
field(OUTA,"VME02:GLBL:m_window PP NMS ")
}

##	PV GLBL:DIG:F01:d3_window generated by WriteEPICSBitgroup from line 705 of spreadsheet
record(ai,"$(P)$(R)GLBL:DIG:F01:d3_window")
{
field(SCAN,"1 second")
field(DTYP,"asynUInt32Digital")
field(INP,"GLBL:DIG:F01:d3_window PP NMS")
field(DESC,"Set the width of the d2 ")		##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Set the width of the d2 window. (10 ns per count)
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(EGU,"us")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
}
#-------------------------------------------------------
record(ao,"$(P)$(R)GLBL:DIG:F01:d3_window")
{
field(DTYP,"asynUInt32Digital")
field(OUT,"GLBL:DIG:F01:d3_window PP NMS")
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(EGU,"us")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
field(DESC,"Set the width of the d2 ")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Set the width of the d2 window. (10 ns per count)
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of d3_window across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:d3_window")
{
field(OUTA,"GLBL:DIG:F02:d3_window PP NMS ")
field(OUTB,"VME01:GLBL:d3_window PP NMS ")
}
record(dfanout,"GLBL:DIG:F02:d3_window")
{
field(OUTA,"VME02:GLBL:d3_window PP NMS ")
}

##	PV GLBL:DIG:F01:disc_width generated by WriteEPICSBitgroup from line 737 of spreadsheet
record(ai,"$(P)$(R)GLBL:DIG:F01:disc_width")
{
field(SCAN,"1 second")
field(DTYP,"asynUInt32Digital")
field(INP,"GLBL:DIG:F01:disc_width PP NMS")
field(DESC,"Set the width of the acc")		##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Set the width of the accepted hit signal, sent back up to the routers. (Width = (n + 1) x 20ns)
## No conversions specified for \*conversions*\ keyword
}
#-------------------------------------------------------
record(ao,"$(P)$(R)GLBL:DIG:F01:disc_width")
{
field(DTYP,"asynUInt32Digital")
field(OUT,"GLBL:DIG:F01:disc_width PP NMS")
## No conversions specified for \*conversions*\ keyword
field(DESC,"Set the width of the acc")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Set the width of the accepted hit signal, sent back up to the routers. (Width = (n + 1) x 20ns)
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of disc_width across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:disc_width")
{
field(OUTA,"GLBL:DIG:F02:disc_width PP NMS ")
field(OUTB,"VME01:GLBL:disc_width PP NMS ")
}
record(dfanout,"GLBL:DIG:F02:disc_width")
{
field(OUTA,"VME02:GLBL:disc_width PP NMS ")
}

##	PV GLBL:DIG:F01:baseline_start generated by WriteEPICSBitgroup from line 769 of spreadsheet
record(ai,"$(P)$(R)GLBL:DIG:F01:baseline_start")
{
field(SCAN,"1 second")
field(DTYP,"asynUInt32Digital")
field(INP,"GLBL:DIG:F01:baseline_start PP NMS")
field(DESC,"Sets the ADC count value")		##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Sets the ADC count value from which the baseline tracker starts tracking
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(EGU,"adu")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
}
#-------------------------------------------------------
record(ao,"$(P)$(R)GLBL:DIG:F01:baseline_start")
{
field(DTYP,"asynUInt32Digital")
field(OUT,"GLBL:DIG:F01:baseline_start PP NMS")
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(EGU,"adu")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
field(DESC,"Sets the ADC count value")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Sets the ADC count value from which the baseline tracker starts tracking
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of baseline_start across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:baseline_start")
{
field(OUTA,"GLBL:DIG:F02:baseline_start PP NMS ")
field(OUTB,"VME01:GLBL:baseline_start PP NMS ")
}
record(dfanout,"GLBL:DIG:F02:baseline_start")
{
field(OUTA,"VME02:GLBL:baseline_start PP NMS ")
}

##	PV GLBL:DIG:F01:p1_window generated by WriteEPICSBitgroup from line 801 of spreadsheet
record(ai,"$(P)$(R)GLBL:DIG:F01:p1_window")
{
field(SCAN,"1 second")
field(DTYP,"asynUInt32Digital")
field(INP,"GLBL:DIG:F01:p1_window PP NMS")
field(DESC,"Set the P1 window delay.")		##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Set the P1 window delay. (10 ns per count)
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(EGU,"us")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
}
#-------------------------------------------------------
record(ao,"$(P)$(R)GLBL:DIG:F01:p1_window")
{
field(DTYP,"asynUInt32Digital")
field(OUT,"GLBL:DIG:F01:p1_window PP NMS")
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(EGU,"us")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
field(DESC,"Set the P1 window delay.")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Set the P1 window delay. (10 ns per count)
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of p1_window across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:p1_window")
{
field(OUTA,"GLBL:DIG:F02:p1_window PP NMS ")
field(OUTB,"VME01:GLBL:p1_window PP NMS ")
}
record(dfanout,"GLBL:DIG:F02:p1_window")
{
field(OUTA,"VME02:GLBL:p1_window PP NMS ")
}

##	PV GLBL:DIG:F01:dac_channel_select generated by WriteEPICSBitgroup from line 808 of spreadsheet
record(ai,"$(P)$(R)GLBL:DIG:F01:dac_channel_select")
{
field(SCAN,"1 second")
field(DTYP,"asynUInt32Digital")
field(INP,"GLBL:DIG:F01:dac_channel_select PP NMS")
field(DESC,"Sets which channels diag")		##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Sets which channels diagnostic output is presented to the DAC
## No conversions specified for \*conversions*\ keyword
}
#-------------------------------------------------------
record(ao,"$(P)$(R)GLBL:DIG:F01:dac_channel_select")
{
field(DTYP,"asynUInt32Digital")
field(OUT,"GLBL:DIG:F01:dac_channel_select PP NMS")
## No conversions specified for \*conversions*\ keyword
field(DESC,"Sets which channels diag")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Sets which channels diagnostic output is presented to the DAC
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of dac_channel_select across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:dac_channel_select")
{
field(OUTA,"GLBL:DIG:F02:dac_channel_select PP NMS ")
field(OUTB,"VME01:GLBL:dac_channel_select PP NMS ")
}
record(dfanout,"GLBL:DIG:F02:dac_channel_select")
{
field(OUTA,"VME02:GLBL:dac_channel_select PP NMS ")
}

##	PV GLBL:DIG:F01:dac_attenuation generated by WriteEPICSBitgroup from line 810 of spreadsheet
record(ai,"$(P)$(R)GLBL:DIG:F01:dac_attenuation")
{
field(SCAN,"1 second")
field(DTYP,"asynUInt32Digital")
field(INP,"GLBL:DIG:F01:dac_attenuation PP NMS")
field(DESC,"Sets the attenuation app")		##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Sets the attenuation applied to the diagnostic output. (Attenuation = 2^(Reg Value))
## No conversions specified for \*conversions*\ keyword
}
#-------------------------------------------------------
record(ao,"$(P)$(R)GLBL:DIG:F01:dac_attenuation")
{
field(DTYP,"asynUInt32Digital")
field(OUT,"GLBL:DIG:F01:dac_attenuation PP NMS")
## No conversions specified for \*conversions*\ keyword
field(DESC,"Sets the attenuation app")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Sets the attenuation applied to the diagnostic output. (Attenuation = 2^(Reg Value))
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of dac_attenuation across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:dac_attenuation")
{
field(OUTA,"GLBL:DIG:F02:dac_attenuation PP NMS ")
field(OUTB,"VME01:GLBL:dac_attenuation PP NMS ")
}
record(dfanout,"GLBL:DIG:F02:dac_attenuation")
{
field(OUTA,"VME02:GLBL:dac_attenuation PP NMS ")
}

##	PV GLBL:DIG:F01:p2_window generated by WriteEPICSBitgroup from line 815 of spreadsheet
record(ai,"$(P)$(R)GLBL:DIG:F01:p2_window")
{
field(SCAN,"1 second")
field(DTYP,"asynUInt32Digital")
field(INP,"GLBL:DIG:F01:p2_window PP NMS")
field(DESC,"P2 window delay. (10 ns ")		##DESC truncated to EPICS limit of 24 characters. 
										##Full description : P2 window delay. (10 ns per count)
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(EGU,"us")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
}
#-------------------------------------------------------
record(ao,"$(P)$(R)GLBL:DIG:F01:p2_window")
{
field(DTYP,"asynUInt32Digital")
field(OUT,"GLBL:DIG:F01:p2_window PP NMS")
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(EGU,"us")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
field(DESC,"P2 window delay. (10 ns ")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : P2 window delay. (10 ns per count)
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of p2_window across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:p2_window")
{
field(OUTA,"GLBL:DIG:F02:p2_window PP NMS ")
field(OUTB,"VME01:GLBL:p2_window PP NMS ")
}
record(dfanout,"GLBL:DIG:F02:p2_window")
{
field(OUTA,"VME02:GLBL:p2_window PP NMS ")
}

##	PV GLBL:DIG:F01:DIAG_DISC_SEL generated by WriteEPICSBitgroup from line 823 of spreadsheet
record(bi,"GLBL:DIG:F01:DIAG_DISC_SEL")
{
field(DTYP,"asynUInt32Digital")
field(SCAN,"1 second")
#  Source string : 0:LED;1:CFD
field (ZNAM,"LED")
field (ONAM,"CFD")
	
field(DESC,"allows selection of whet")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : allows selection of whether the front panel LED is the pre-trigger or the CFD firing.
field(INP,"GLBL:DIG:F01:DIAG_DISC_SEL PP NMS")
}
#-------------------------------------------------------
record(bo,"GLBL:DIG:F01:DIAG_DISC_SEL")
{
field(DOL,"0")
field(DTYP,"asynUInt32Digital")
#  Source string : 0:LED;1:CFD
field (ZNAM,"LED")
field (ONAM,"CFD")
	
field(DESC,"allows selection of whet")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : allows selection of whether the front panel LED is the pre-trigger or the CFD firing.
field(OUT,"GLBL:DIG:F01:DIAG_DISC_SEL PP NMS")
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of DIAG_DISC_SEL across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:DIAG_DISC_SEL")
{
field(OUTA,"GLBL:DIG:F02:DIAG_DISC_SEL PP NMS ")
field(OUTB,"VME01:GLBL:DIAG_DISC_SEL PP NMS ")
}
record(dfanout,"GLBL:DIG:F02:DIAG_DISC_SEL")
{
field(OUTA,"VME02:GLBL:DIAG_DISC_SEL PP NMS ")
}

##	PV GLBL:DIG:F01:DIAG_WAVE_SEL generated by WriteEPICSBitgroup from line 825 of spreadsheet
record(mbbi,"GLBL:DIG:F01:DIAG_WAVE_SEL")
{
field(DTYP,"asynUInt32Digital")
field(SCAN,"1 second")
#  Source string : 0:ADC:0;1:cfd:1;2:run_pre:2;3:run_post:3
	field (ZRST,"ADC")
	field (ZRVL,"0")
	field (ONST,"cfd")
	field (ONVL,"1")
	field (TWST,"run_pre")
	field (TWVL,"2")
	field (THST,"run_post")
	field (THVL,"3")
	
field(DESC,"allows selection of whet")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : allows selection of whether waveform data is the raw ADC data or the CFD equation.
field(INP,"GLBL:DIG:F01:DIAG_WAVE_SEL PP NMS")
}
#-------------------------------------------------------
record(mbbo,"GLBL:DIG:F01:DIAG_WAVE_SEL")
{
field(DTYP,"asynUInt32Digital")
#  Source string : 0:ADC:0;1:cfd:1;2:run_pre:2;3:run_post:3
	field (ZRST,"ADC")
	field (ZRVL,"0")
	field (ONST,"cfd")
	field (ONVL,"1")
	field (TWST,"run_pre")
	field (TWVL,"2")
	field (THST,"run_post")
	field (THVL,"3")
	
field(DESC,"allows selection of whet")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : allows selection of whether waveform data is the raw ADC data or the CFD equation.
field(OUT,"GLBL:DIG:F01:DIAG_WAVE_SEL PP NMS")
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of DIAG_WAVE_SEL across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:DIAG_WAVE_SEL")
{
field(OUTA,"GLBL:DIG:F02:DIAG_WAVE_SEL PP NMS ")
field(OUTB,"VME01:GLBL:DIAG_WAVE_SEL PP NMS ")
}
record(dfanout,"GLBL:DIG:F02:DIAG_WAVE_SEL")
{
field(OUTA,"VME02:GLBL:DIAG_WAVE_SEL PP NMS ")
}

##	PV GLBL:DIG:F01:load_delays generated by WriteEPICSBitgroup from line 843 of spreadsheet
record(bo,"GLBL:DIG:F01:load_delays")
{
field(DOL,"0")
field(DTYP,"asynUInt32Digital")
#  Source string : 0:No;1:Yes
field (ZNAM,"No")
field (ONAM,"Yes")
	
field(DESC,"Writing '1' will cause t")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Writing '1' will cause the m, k, d, and d2 delays to load. 
field(OUT,"GLBL:DIG:F01:load_delays PP NMS")
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of load_delays across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:load_delays")
{
field(OUTA,"GLBL:DIG:F02:load_delays PP NMS ")
field(OUTB,"VME01:GLBL:load_delays PP NMS ")
}
record(dfanout,"GLBL:DIG:F02:load_delays")
{
field(OUTA,"VME02:GLBL:load_delays PP NMS ")
}

##	PV GLBL:DIG:F01:load_baseline generated by WriteEPICSBitgroup from line 845 of spreadsheet
record(bo,"GLBL:DIG:F01:load_baseline")
{
field(DOL,"0")
field(DTYP,"asynUInt32Digital")
#  Source string : 0:No;1:Yes
field (ZNAM,"No")
field (ONAM,"Yes")
	
field(DESC,"0")
field(OUT,"GLBL:DIG:F01:load_baseline PP NMS")
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of load_baseline across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:load_baseline")
{
field(OUTA,"GLBL:DIG:F02:load_baseline PP NMS ")
field(OUTB,"VME01:GLBL:load_baseline PP NMS ")
}
record(dfanout,"GLBL:DIG:F02:load_baseline")
{
field(OUTA,"VME02:GLBL:load_baseline PP NMS ")
}

##	PV GLBL:DIG:F01:EXT_DISC_REQ generated by WriteEPICSBitgroup from line 847 of spreadsheet
record(bo,"GLBL:DIG:F01:EXT_DISC_REQ")
{
field(DOL,"0")
field(DTYP,"asynUInt32Digital")
#  Source string : 0:No;1:Yes
field (ZNAM,"No")
field (ONAM,"Yes")
	
field(DESC,"if set, requests externa")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : if set, requests external discriminator pulse
field(OUT,"GLBL:DIG:F01:EXT_DISC_REQ PP NMS")
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of EXT_DISC_REQ across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:EXT_DISC_REQ")
{
field(OUTA,"GLBL:DIG:F02:EXT_DISC_REQ PP NMS ")
field(OUTB,"VME01:GLBL:EXT_DISC_REQ PP NMS ")
}
record(dfanout,"GLBL:DIG:F02:EXT_DISC_REQ")
{
field(OUTA,"VME02:GLBL:EXT_DISC_REQ PP NMS ")
}

##	PV GLBL:DIG:F01:diag_mux_control generated by WriteEPICSBitgroup from line 852 of spreadsheet
record(mbbi,"GLBL:DIG:F01:diag_mux_control")
{
field(DTYP,"asynUInt32Digital")
field(SCAN,"1 second")
#  Source string : 0:rawADC:0;1:RunSumM:1;2:FiltSimDisc:2;3:NULL:3
	field (ZRST,"rawADC")
	field (ZRVL,"0")
	field (ONST,"RunSumM")
	field (ONVL,"1")
	field (TWST,"FiltSimDisc")
	field (TWVL,"2")
	field (THST,"NULL")
	field (THVL,"3")
	
field(DESC,"Selects which diagnostic")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Selects which diagnostic output the channels present to the DAC.  (0 = raw ADC, 1 = running sum across m, 2 = filtered sum used by the discriminator, 3 = reserved)
field(INP,"GLBL:DIG:F01:diag_mux_control PP NMS")
}
#-------------------------------------------------------
record(mbbo,"GLBL:DIG:F01:diag_mux_control")
{
field(DTYP,"asynUInt32Digital")
#  Source string : 0:rawADC:0;1:RunSumM:1;2:FiltSimDisc:2;3:NULL:3
	field (ZRST,"rawADC")
	field (ZRVL,"0")
	field (ONST,"RunSumM")
	field (ONVL,"1")
	field (TWST,"FiltSimDisc")
	field (TWVL,"2")
	field (THST,"NULL")
	field (THVL,"3")
	
field(DESC,"Selects which diagnostic")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Selects which diagnostic output the channels present to the DAC.  (0 = raw ADC, 1 = running sum across m, 2 = filtered sum used by the discriminator, 3 = reserved)
field(OUT,"GLBL:DIG:F01:diag_mux_control PP NMS")
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of diag_mux_control across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:diag_mux_control")
{
field(OUTA,"GLBL:DIG:F02:diag_mux_control PP NMS ")
field(OUTB,"VME01:GLBL:diag_mux_control PP NMS ")
}
record(dfanout,"GLBL:DIG:F02:diag_mux_control")
{
field(OUTA,"VME02:GLBL:diag_mux_control PP NMS ")
}

##	PV GLBL:DIG:F01:holdoff_time generated by WriteEPICSBitgroup from line 859 of spreadsheet
record(ai,"$(P)$(R)GLBL:DIG:F01:holdoff_time")
{
field(SCAN,"1 second")
field(DTYP,"asynUInt32Digital")
field(INP,"GLBL:DIG:F01:holdoff_time PP NMS")
field(DESC,"holdoff delay, in number")		##DESC truncated to EPICS limit of 24 characters. 
										##Full description : holdoff delay, in number of 20ns clock ticks after discriminator fires.
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(ESLO,"20")
	field(EGU,"ns")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
}
#-------------------------------------------------------
record(ao,"$(P)$(R)GLBL:DIG:F01:holdoff_time")
{
field(DTYP,"asynUInt32Digital")
field(OUT,"GLBL:DIG:F01:holdoff_time PP NMS")
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(ESLO,"20")
	field(EGU,"ns")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
field(DESC,"holdoff delay, in number")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : holdoff delay, in number of 20ns clock ticks after discriminator fires.
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of holdoff_time across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:holdoff_time")
{
field(OUTA,"GLBL:DIG:F02:holdoff_time PP NMS ")
field(OUTB,"VME01:GLBL:holdoff_time PP NMS ")
}
record(dfanout,"GLBL:DIG:F02:holdoff_time")
{
field(OUTA,"VME02:GLBL:holdoff_time PP NMS ")
}

##	PV GLBL:DIG:F01:peak_sensitivity generated by WriteEPICSBitgroup from line 861 of spreadsheet
record(ai,"$(P)$(R)GLBL:DIG:F01:peak_sensitivity")
{
field(SCAN,"1 second")
field(DTYP,"asynUInt32Digital")
field(INP,"GLBL:DIG:F01:peak_sensitivity PP NMS")
field(DESC,"peak sensitivity control")	
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(EGU,"adu")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
}
#-------------------------------------------------------
record(ao,"$(P)$(R)GLBL:DIG:F01:peak_sensitivity")
{
field(DTYP,"asynUInt32Digital")
field(OUT,"GLBL:DIG:F01:peak_sensitivity PP NMS")
	## following statements generated from \*CONVERSIONS*\ keyword in template
	field(EGU,"adu")
	## End of statements generated from \*CONVERSIONS*\ keyword in template
field(DESC,"peak sensitivity control")
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of peak_sensitivity across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:peak_sensitivity")
{
field(OUTA,"GLBL:DIG:F02:peak_sensitivity PP NMS ")
field(OUTB,"VME01:GLBL:peak_sensitivity PP NMS ")
}
record(dfanout,"GLBL:DIG:F02:peak_sensitivity")
{
field(OUTA,"VME02:GLBL:peak_sensitivity PP NMS ")
}

##	PV GLBL:DIG:F01:auto_mode generated by WriteEPICSBitgroup from line 863 of spreadsheet
record(bi,"GLBL:DIG:F01:auto_mode")
{
field(DTYP,"asynUInt32Digital")
field(SCAN,"1 second")
#  Source string : 0:OFF;1:ON 
field (ZNAM,"OFF")
field (ONAM,"ON ")
	
field(DESC,"If set, holdoff delay is")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : If set, holdoff delay is tied to peak finder.
field(INP,"GLBL:DIG:F01:auto_mode PP NMS")
}
#-------------------------------------------------------
record(bo,"GLBL:DIG:F01:auto_mode")
{
field(DOL,"0")
field(DTYP,"asynUInt32Digital")
#  Source string : 0:OFF;1:ON 
field (ZNAM,"OFF")
field (ONAM,"ON ")
	
field(DESC,"If set, holdoff delay is")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : If set, holdoff delay is tied to peak finder.
field(OUT,"GLBL:DIG:F01:auto_mode PP NMS")
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of auto_mode across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:auto_mode")
{
field(OUTA,"GLBL:DIG:F02:auto_mode PP NMS ")
field(OUTB,"VME01:GLBL:auto_mode PP NMS ")
}
record(dfanout,"GLBL:DIG:F02:auto_mode")
{
field(OUTA,"VME02:GLBL:auto_mode PP NMS ")
}

##	PV GLBL:DIG:F01:diag_input generated by WriteEPICSBitgroup from line 876 of spreadsheet
record(ai,"$(P)$(R)GLBL:DIG:F01:diag_input")
{
field(SCAN,"1 second")
field(DTYP,"asynUInt32Digital")
field(INP,"GLBL:DIG:F01:diag_input PP NMS")
field(DESC,"Sets the diagnostic valu")		##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Sets the diagnostic value to send to unmasked channels .(See field below.)
## No conversions specified for \*conversions*\ keyword
}
#-------------------------------------------------------
record(ao,"$(P)$(R)GLBL:DIG:F01:diag_input")
{
field(DTYP,"asynUInt32Digital")
field(OUT,"GLBL:DIG:F01:diag_input PP NMS")
## No conversions specified for \*conversions*\ keyword
field(DESC,"Sets the diagnostic valu")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Sets the diagnostic value to send to unmasked channels .(See field below.)
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of diag_input across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:diag_input")
{
field(OUTA,"GLBL:DIG:F02:diag_input PP NMS ")
field(OUTB,"VME01:GLBL:diag_input PP NMS ")
}
record(dfanout,"GLBL:DIG:F02:diag_input")
{
field(OUTA,"VME02:GLBL:diag_input PP NMS ")
}

##	PV GLBL:DIG:F01:diag_input_en generated by WriteEPICSBitgroup from line 878 of spreadsheet
record(ai,"$(P)$(R)GLBL:DIG:F01:diag_input_en")
{
field(SCAN,"1 second")
field(DTYP,"asynUInt32Digital")
field(INP,"GLBL:DIG:F01:diag_input_en PP NMS")
field(DESC,"Sets which channels are ")		##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Sets which channels are provided the  diag_input and which receive real ADC data. (0 = ADC data, 1 = Diag Input)
## No conversions specified for \*conversions*\ keyword
}
#-------------------------------------------------------
record(ao,"$(P)$(R)GLBL:DIG:F01:diag_input_en")
{
field(DTYP,"asynUInt32Digital")
field(OUT,"GLBL:DIG:F01:diag_input_en PP NMS")
## No conversions specified for \*conversions*\ keyword
field(DESC,"Sets which channels are ")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Sets which channels are provided the  diag_input and which receive real ADC data. (0 = ADC data, 1 = Diag Input)
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of diag_input_en across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:diag_input_en")
{
field(OUTA,"GLBL:DIG:F02:diag_input_en PP NMS ")
field(OUTB,"VME01:GLBL:diag_input_en PP NMS ")
}
record(dfanout,"GLBL:DIG:F02:diag_input_en")
{
field(OUTA,"VME02:GLBL:diag_input_en PP NMS ")
}

##	PV GLBL:DIG:F01:ext_disc_sel generated by WriteEPICSBitgroup from line 894 of spreadsheet
record(mbbi,"GLBL:DIG:F01:ext_disc_sel")
{
field(DTYP,"asynUInt32Digital")
field(SCAN,"1 second")
#  Source string : 0:Disc ONLY:0;1:Disc OR Ext:1;2:Disc AND Ext:2;3:Ext ONLY:3
	field (ZRST,"Disc ONLY")
	field (ZRVL,"0")
	field (ONST,"Disc OR Ext")
	field (ONVL,"1")
	field (TWST,"Disc AND Ext")
	field (TWVL,"2")
	field (THST,"Ext ONLY")
	field (THVL,"3")
	
field(DESC,"Selects mode of external")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Selects mode of external discriminator usage for the channel.
field(INP,"GLBL:DIG:F01:ext_disc_sel PP NMS")
}
#-------------------------------------------------------
record(mbbo,"GLBL:DIG:F01:ext_disc_sel")
{
field(DTYP,"asynUInt32Digital")
#  Source string : 0:Disc ONLY:0;1:Disc OR Ext:1;2:Disc AND Ext:2;3:Ext ONLY:3
	field (ZRST,"Disc ONLY")
	field (ZRVL,"0")
	field (ONST,"Disc OR Ext")
	field (ONVL,"1")
	field (TWST,"Disc AND Ext")
	field (TWVL,"2")
	field (THST,"Ext ONLY")
	field (THVL,"3")
	
field(DESC,"Selects mode of external")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Selects mode of external discriminator usage for the channel.
field(OUT,"GLBL:DIG:F01:ext_disc_sel PP NMS")
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of ext_disc_sel across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:ext_disc_sel")
{
field(OUTA,"GLBL:DIG:F02:ext_disc_sel PP NMS ")
field(OUTB,"VME01:GLBL:ext_disc_sel PP NMS ")
}
record(dfanout,"GLBL:DIG:F02:ext_disc_sel")
{
field(OUTA,"VME02:GLBL:ext_disc_sel PP NMS ")
}

##	PV GLBL:DIG:F01:ext_disc_ts_sel generated by WriteEPICSBitgroup from line 896 of spreadsheet
record(mbbi,"GLBL:DIG:F01:ext_disc_ts_sel")
{
field(DTYP,"asynUInt32Digital")
field(SCAN,"1 second")
#  Source string : 0:0.75Hz:0;1:6.0Hz:1;2:23.8Hz:2;3:95.4Hz:3;4:1.5kHz:4;5:48.4kHz:5;6:195kHz:6;7:OFF:7
	field (ZRST,"0.75Hz")
	field (ZRVL,"0")
	field (ONST,"6.0Hz")
	field (ONVL,"1")
	field (TWST,"23.8Hz")
	field (TWVL,"2")
	field (THST,"95.4Hz")
	field (THVL,"3")
	field (FRST,"1.5kHz")
	field (FRVL,"4")
	field (FVST,"48.4kHz")
	field (FVVL,"5")
	field (SXST,"195kHz")
	field (SXVL,"6")
	field (SVST,"OFF")
	field (SVVL,"7")
	
field(DESC,"Selects rate of external")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Selects rate of external discriminator firings if TS mode is selected
field(INP,"GLBL:DIG:F01:ext_disc_ts_sel PP NMS")
}
#-------------------------------------------------------
record(mbbo,"GLBL:DIG:F01:ext_disc_ts_sel")
{
field(DTYP,"asynUInt32Digital")
#  Source string : 0:0.75Hz:0;1:6.0Hz:1;2:23.8Hz:2;3:95.4Hz:3;4:1.5kHz:4;5:48.4kHz:5;6:195kHz:6;7:OFF:7
	field (ZRST,"0.75Hz")
	field (ZRVL,"0")
	field (ONST,"6.0Hz")
	field (ONVL,"1")
	field (TWST,"23.8Hz")
	field (TWVL,"2")
	field (THST,"95.4Hz")
	field (THVL,"3")
	field (FRST,"1.5kHz")
	field (FRVL,"4")
	field (FVST,"48.4kHz")
	field (FVVL,"5")
	field (SXST,"195kHz")
	field (SXVL,"6")
	field (SVST,"OFF")
	field (SVVL,"7")
	
field(DESC,"Selects rate of external")	##DESC truncated to EPICS limit of 24 characters. 
										##Full description : Selects rate of external discriminator firings if TS mode is selected
field(OUT,"GLBL:DIG:F01:ext_disc_ts_sel PP NMS")
}
#-------------------------------------------------------
##------------------------------------------------------------------
##  Fanout of ext_disc_ts_sel across crates in system
##------------------------------------------------------------------

record(dfanout,"GLBL:DIG:F01:ext_disc_ts_sel")
{
field(OUTA,"GLBL:DIG:F02:ext_disc_ts_sel PP NMS ")
field(OUTB,"VME01:GLBL:ext_disc_ts_sel PP NMS ")
}
record(dfanout,"GLBL:DIG:F02:ext_disc_ts_sel")
{
field(OUTA,"VME02:GLBL:ext_disc_ts_sel PP NMS ")
}

